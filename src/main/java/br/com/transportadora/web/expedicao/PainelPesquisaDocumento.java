package br.com.transportadora.web.expedicao;

import br.com.transportadora.entity.Documento;
import br.com.transportadora.entity.HistoricoPostagem;
import br.com.transportadora.service.DocumentosService;
import br.com.transportadora.service.HistoricoService;
import br.com.transportadora.ui.Dialog;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.ShortcutAction;
import com.vaadin.icons.VaadinIcons;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.server.ExternalResource;
import com.vaadin.ui.*;

import javax.annotation.PostConstruct;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

public class PainelPesquisaDocumento extends CustomComponent implements View {

    private final TextField filtroText;

    public PainelPesquisaDocumento() {
        this.setSizeFull();

        /* Layout principal */
        var mainLayout = new VerticalLayout();
        mainLayout.setSizeFull();
        mainLayout.setMargin(false);

        this.setCompositionRoot(mainLayout);

        /* Logo da transportadora */
        var logo = new Embedded(null, new ExternalResource("https://cdn.icon-icons.com/icons2/907/PNG/512/delivery-truck-with-c-sign_icon-icons.com_70506.png"));
        logo.setWidth(300f, Unit.PIXELS);
        logo.setHeight(300f, Unit.PIXELS);

        mainLayout.addComponent(logo);
        mainLayout.setComponentAlignment(logo, Alignment.MIDDLE_CENTER);

        /* Barra de pesquisa */
        var barraLayout = new HorizontalLayout();
        barraLayout.setWidth(300f, Unit.PIXELS);
        barraLayout.setCaption("Informe o código de postagem");

        filtroText = new TextField();
        filtroText.setWidth(300f, Unit.PIXELS);
        filtroText.focus();
        filtroText.setRequiredIndicatorVisible(true);
        barraLayout.addComponent(filtroText);
        mainLayout.addComponent(barraLayout);

        /* Botão Pesquisar */
        Button pesquisarButton = new Button();
        pesquisarButton.setDescription("Pesquisar");
        pesquisarButton.setIcon(VaadinIcons.SEARCH);
        pesquisarButton.addClickListener(e -> {
            pesquisar(filtroText.getValue());
        });
        pesquisarButton.setClickShortcut(ShortcutAction.KeyCode.ENTER);
        barraLayout.addComponent(pesquisarButton);
        barraLayout.setComponentAlignment(pesquisarButton, Alignment.MIDDLE_RIGHT);
        mainLayout.setComponentAlignment(barraLayout, Alignment.MIDDLE_CENTER);
    }

    @PostConstruct
    public void init() {
    }

    public void enter(ViewChangeListener.ViewChangeEvent event) {

    }

    private void pesquisar(String filtro) {
        if (filtro.isEmpty()) {
            Notification.show("O campo código de postagem é obrigatório!", Notification.Type.WARNING_MESSAGE);
            return;
        }

        var documentosService = new DocumentosService();
        var documento = documentosService.pesquisarDocumentosExpedicao(filtro);

        if (documento.isEmpty()) {
            Notification.show("O código de postagem " + filtro + " não foi encontrado!", Notification.Type.WARNING_MESSAGE);
            return;
        }

        var pesquisaDocumentosDialog = new PesquisaDocumentoDialog(documento.get());
        pesquisaDocumentosDialog.addWindowResultListener(event -> pesquisar(null));
        UI.getCurrent().addWindow(pesquisaDocumentosDialog);
    }

    private class PesquisaDocumentoDialog extends Dialog {
        @AutoGenerated
        private final Grid<HistoricoPostagem> grid;

        private Documento documento;

        public PesquisaDocumentoDialog(Documento documento) {
            this.setCaption("Acompanhar encomenda");

            /* Layout principal da dialog */
            var mainLayout = new VerticalLayout();
            mainLayout.setWidth(900f, Unit.PIXELS);
            mainLayout.setMargin(true);
            mainLayout.setSpacing(true);
            this.setContent(mainLayout);

            /* Layout de movimentações */
            var movimentacaoPainel = new Panel("Movimentações");
            movimentacaoPainel.setWidth(100f, Unit.PERCENTAGE);
            mainLayout.addComponent(movimentacaoPainel);

            /* Formatador de data e hora */
            var dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss").withZone(ZoneId.systemDefault());

            /* Grid de movimentações */
            grid = new Grid<>();
            grid.setWidth(100f, Unit.PERCENTAGE);
            grid.setHeight(200f, Unit.PIXELS);
            grid.setSelectionMode(Grid.SelectionMode.NONE);
            grid.addColumn(h -> h.getDocumento().getCodigoPostagem()).setCaption("Código de postagem");
            grid.addColumn(h -> dtf.format(h.getData())).setCaption("Data/hora movimento");
            grid.addColumn(HistoricoPostagem::getComentario).setCaption("Movimento");
            movimentacaoPainel.setContent(grid);

            this.documento = documento;
            adicionarLinhas();
        }

        /* Alimentação do grid */
        private void adicionarLinhas() {
            var historicoService = new HistoricoService();
            var historicoPostagem = historicoService.carregarHistoricoByDocumento(documento);
            grid.setItems(historicoPostagem);
        }
    }
}
